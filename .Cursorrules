# Dart/Flutter 프로그래밍 가이드라인

## Dart 기본 가이드라인

### 기본 원칙
- 모든 코드와 문서는 영어로 작성
- 모든 변수와 함수의 타입을 명시적으로 선언
  - `any` 사용 지양
  - 필요한 타입 직접 생성
- 함수 내 빈 줄 사용 금지
- 파일당 하나의 export만 사용

### 명명 규칙
- 클래스: PascalCase 사용
- 변수/함수/메서드: camelCase 사용
- 파일/디렉토리: underscores_case 사용
- 환경변수: UPPERCASE 사용
  - 매직넘버 사용 금지, 상수로 정의
- 함수는 동사로 시작
- 불리언 변수는 동사 사용 (예: isLoading, hasError, canDelete)
- 약어 대신 완전한 단어 사용 (철자 정확히)
  - 예외: API, URL 등 표준 약어
  - 허용되는 약어:
    - i, j (반복문)
    - err (에러)
    - ctx (컨텍스트)
    - req, res, next (미들웨어 파라미터)

### 함수 작성 규칙
- 함수는 메서드에도 동일하게 적용
- 20줄 이내의 단일 목적 함수 작성
- 함수명은 동사+명사 형태
  - 불리언 반환: isX, hasX, canX 등
  - void 함수: executeX, saveX 등
- 중첩 블록 피하기:
  - 조기 반환 사용
  - 유틸리티 함수로 분리
- 고차 함수 활용 (map, filter, reduce 등)
  - 3줄 이내 간단한 함수는 화살표 함수
  - 복잡한 함수는 이름 있는 함수
- null 체크 대신 기본값 파라미터 사용
- RO-RO 원칙으로 파라미터 줄이기
  - 다중 파라미터는 객체로 전달
  - 결과도 객체로 반환
  - 입출력 타입 명시
- 단일 추상화 수준 유지

### 데이터 관리
- 기본 타입 남용 금지, 복합 타입으로 캡슐화
- 함수 내 데이터 검증 대신 클래스 내부 검증
- 불변성 선호
  - 변경 없는 데이터는 readonly
  - 변경 없는 리터럴은 const

### 클래스 설계
- SOLID 원칙 준수
- 상속보다 컴포지션 선호
- 계약을 위한 인터페이스 선언
- 작고 단일 목적의 클래스 작성
  - 200줄 이내
  - 공개 메서드 10개 이내
  - 속성 10개 이내

### 예외 처리
- 예상치 못한 오류는 예외로 처리
- 예외 처리는 다음 경우에만:
  - 예상된 문제 해결
  - 컨텍스트 추가
  - 그 외는 전역 핸들러 사용

### 테스트
- Arrange-Act-Assert 규칙 준수
- 테스트 변수명 명확하게:
  - inputX, mockX, actualX, expectedX 등
- 모든 공개 함수 단위 테스트
  - 의존성은 테스트 더블로 시뮬레이션
  - 예외: 실행 비용이 낮은 서드파티
- 모듈별 수용성 테스트
  - Given-When-Then 규칙

## Flutter 특화 가이드라인

### 기본 원칙
- 클린 아키텍처 사용
  - 모듈/컨트롤러/서비스/저장소/엔티티 구조
- 데이터 지속성은 저장소 패턴
  - 캐시 관리 포함
- 비즈니스 로직은 Riverpod 컨트롤러
- 상태 관리는 Riverpod
  - 필요시 keepAlive 사용
- UI 상태는 freezed로 관리
- 라우팅은 GoRouter
- 재사용 코드는 확장으로
- 테마는 ThemeData로
- 다국어는 AppLocalizations로
- 상수는 constants로
- 탐색 및 심층 연결을 위해 GoRouter를 사용
- 플러터 성능 지표(첫 번째 의미 있는 페인트, 인터랙티브 시간)에 최적화
- 주에 따라 달라지는 위젯을 위해 리버팟과 함께 컨슈머 위젯을 사용

### 위젯 구조화
- 깊은 위젯 트리는 성능 저하 유발
- 평평한 구조가 코드 이해와 수정 용이
- 복잡한 위젯은 작은 컴포넌트로 분리
- 상태 관리는 얕은 트리가 유리
- 큰 위젯은 작은 단위로 분할
- const 생성자 적극 활용
- 상태 비저장 위젯 선호

### 테스트
- Flutter 표준 위젯 테스트 사용
- API 모듈은 통합 테스트 작성 

---